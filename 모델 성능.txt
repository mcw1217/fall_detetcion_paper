https://velog.io/@rlaaltj1765/CNN-LSTM-Dropout
LSTM에 dropout 적용하는 계기


lstm에 activation 함수를 relu로 적용하면 gpu로 연산이 불가능함

tanh를 사용할 경우 gpu로 연산이 가능하지만 predict시 연산이 느려져 영상 송출이 느려지는 현상

lstm보다 파라미터를 줄인 gru를 사용하여 tanh 적용 결과 그래도 송출이 느려짐

gru에 relu를 적용 후 과적합과 파라미터를 줄이기 위해 gru층에 dropout 0.3을 적용하여
속도와 정확도를 좀 더 높혔다.

gru층을 2개 사용하고 dense층을 제거하면 나름 괜찮은 성능을 나타내며 속도도 준수함

gru층 2개와 dense층까지 추가하면 연산 속도가 느려져 송출이 느려짐


----- 데이터셋 관절 데이터로 모든 좌표를 넣기때문에 계산 역시 많이한다
	그렇기때문에 137개에서 필요한 관절좌표만 뽑아내어 47개로 줄여 학습을 진행한다.


파라미터 수를 3배 가까이 줄인 후 모델을 학습시킨 결과 영상송출 속도가 매우 빨라졌다.
gru층 2개일 경우 정확도 또한 매우 준수한 성능을 보인다. activation='relu' ( 과거 best ) 

gru층 1개와 dense32층을 하나 넣을 경우 성능은 준수하지만 속도가 약간 느려진다.


gru계층 기본 activation을 사용, 그다음 gru 층도 기본 activation을 사용
( 속도 매우 빠르면, 성능도 매우 준수 (과거 best)

gru64 dropout0.3 기본 activation, 그다음 dense activation relu 
( 속도 빠름, 성능 매우 안좋음 )

gru64 dropout0.3 기본 activation, 그 다음 dense activation tanh 
( 속도 빠름, 성능 매우 안좋음 )

gru64 dropout0.3 기본 activation, 그 다음 dropout 0.3 ,그다음 dense32 activation tanh
( 애매함, 성능 매우 안좋음 )



gru64 dropout0.3 기본 activation, 그 다음 dropout 0.5 ,그다음 dense32 activation tanh
( 속도 적당함, 성능 안좋음 )


gru64 dropout0.3 기본 activation, 그 다음 dropout 0.3, 그다음 dens32 activation relu
( 속도 매우 빠름, 성능 매우 안좋음 )


gru64 dropout0.3 기본 activation, 그다음 dens32 activation relu
( 속도 매우 빠름, 성능 매우 안좋음 ) / dropout 층을 제거하면 속도가 느려짐


[!]문제1.라벨이 변경될때 렉이 걸림 / 결과 :정확도 이슈때문에 영상송출이 느리게 되는 것임 프레임마다 정확도가 높다면 버퍼링이 존재하지않음 

if conf < 0.8:
	continue 에서 continue 처리 되기때문에 현재프레임은 출력되지않고 다음 프레임을 다시 가져와작업하기 때문에 정확도인 0.8 을 줄이면서 threshold를 조절하면 끊어짐이 덜하다 


[!]데이터셋 생성 팁:
create_dataset_recent에서 데이터 생성시 
action = fall or stand 두가지로 지정 후
fall일 경우 idx= 0 / stand일 경우 idx =1 
그 후 입력 영상과 맨 아래의 np.save에서 영상 이름 저장하는 부분을 바꿔서 서로 다른 np로 저장시킨다. 또한 데이터셋을 증강시킬때는 좌우 반전을 시키면 된다.

좌우반전할 경우 또 다른 데이터셋으로 적용되기때문에 반드시 하는것이 좋다.


[!] 좌우 반전 테스트 영상을 기준으로 모델 재설정

gru64 dropout0.3 activation=relu, 그다음 dense32 activation=relu 
(매우매우 준수한 성능 (이전 best)

gru64 dropout0.3 activation=relu, gru32 dropout=0.3 activation=relu 
(매우매우 준수한 성능 / dense보다 살짝 정확도 딸림 )

gru64 droput0.3 기본 activation, gru 32 droput0.3 기본activation
(매우 괜찮은 성능 / 좌우반전 테스트에서 높은 성능을 보임 ) (best)

gru64 droput0.3 activation=relu, gru 32 droput0.3 activation=relu, dense32 activation=relu
( 괜찮은 성능 )




[!] 프레임 좌표간의 벡터의 방향성을 구한 값을 넣음

(best)
train_test_split 0.2
GRU64 dropout 0.2 activation=relu
dense128 activate=relu
Dropout0.1
dense64 activate=relu
Dropout0.1
dense32 activate=relu
Dropout0.1
dense32 activate=relu
( 준수한 성능, test5,6,7 에서 긍정적인 성과 나옴, 단 test5에서 걷는 것을 lie 잡는 경우가 있음( 카메라의 각도가 원인 ), 카메라를 기준으로 정면과 후면으로 넘어지는 경우도 잡아냄 )


[!] 속도, 가속도를 추가한 결과 Fall을 잡지 못함 / 벡터의 방향성만 넣는 경우가 제일 성능이 좋음


(best)
train_test_split 0.2
GRU64 dropout 0.2 activation=relu
dense128 activate=relu
Dropout0.1
dense64 activate=relu
Dropout0.1
dense32 activate=relu
Dropout0.1
dense32 activate=relu

[!] 벡터의 방향성, 속도를 추가로 넣어 학습 시킴
준수한 성능 



model = Sequential([
    GRU(8,dropout=0.1,activation='relu',input_shape=x_train.shape[1:3]),
    # GRU(32,dropout=0.3),
    Dense(64, activation='relu'),
    # Dropout(0.1),
    Dense(32, activation='relu'),
    # Dropout(0.1),
    Dense(16, activation='relu'),
    # Dropout(0.1),
    Dense(16, activation='relu'),
    Dense(len(actions), activation='softmax')
])

gru 유닛수를 줄여 적당한 성능



===========================================================
데이터 결합
actions = [
    'fall','stand','walking','lie','sit'
]
data = np.load("./dataset/acldataset/seq_fall-2023-1.npy")
datas = np.load("./dataset/acldataset/seq_stand-2023-1.npy")
datas2 = np.load("./dataset/acldataset/seq_walking-2023-1.npy")
datas3 = np.load("./dataset/acldataset/seq_lie-2023-1.npy")
datas4 = np.load("./dataset/acldataset/seq_sit-2023-1.npy")
for i in range(2,105):
    data = np.concatenate([
        data,
        np.load(f'./dataset/acldataset/seq_fall-2023-{i}.npy')
    ], axis=0) 
print("1",data.shape) 
# for i in range(2,3):
#     data = np.concatenate([
#         data,
#         np.load(f'./dataset/acldataset/seq_stand-2023-{i}.npy')
#     ], axis=0)
for i in range(2,3):
    data = np.concatenate([
        data,
        np.load(f'./dataset/acldataset/seq_walking-2023-{i}.npy')
    ], axis=0)
print("2",data.shape) 
for i in range(2,3):
    data = np.concatenate([
        data,
        np.load(f'./dataset/acldataset/seq_lie-2023-{i}.npy')
    ], axis=0) 
print("3",data.shape) 
for i in range(2,48):
    data = np.concatenate([
        data,
        np.load(f'./dataset/acldataset/seq_sit-2023-{i}.npy')
    ], axis=0) 
print("4",data.shape) 
        
data = np.concatenate([data,datas,datas2,datas3,datas4])
print(data.shape)


데이터 스플릿
from sklearn.model_selection import StratifiedShuffleSplit

split = StratifiedShuffleSplit(n_splits=1, test_size=0.2, random_state=1234)

for train_idx, test_idx in split.split(x_data,y_data):
    x_train = x_data[train_idx]
    y_train = y_data[train_idx]
    x_val = x_data[test_idx]
    y_val = y_data[test_idx]

print(x_train.shape, y_train.shape)
print(x_val.shape, y_val.shape)

model = Sequential([
    GRU(8,dropout=0.2,activation='relu',input_shape=x_train.shape[1:3]),
    Dense(128, activation='relu'),
    Dense(64, activation='relu'),
    Dense(32, activation='relu'),
    Dense(16, activation='relu'),
    Dense(len(actions), activation='softmax')
])


학습
from tensorflow.keras.callbacks import ModelCheckpoint, ReduceLROnPlateau, EarlyStopping

history = model.fit(
    x_train,
    y_train,
    validation_data=(x_val, y_val),
    epochs=500,
    callbacks=[
        ModelCheckpoint('models/model.h5', monitor='val_loss', verbose=1, save_best_only=True, mode='auto'),
        EarlyStopping(monitor='val_loss', patience=100, verbose=1, mode='auto'),
        ReduceLROnPlateau(monitor='val_loss', factor=0.5, patience=50, verbose=1, mode='auto')
    ]
)
message = {
    "message" : "[낙상감지 알림] : 낙상감지 모델의 학습이 성공적으로 완료되었습니다!"
}
requests.post(api_url, headers = headers, data = message)


앉는 것과 낙상을 분류할 수 있음 / 전체적으로 준수한 성능
(best) 
[!] 벡터의 방향 파라미터에서 정규화 계산을 제외 후 계산하면 성능이
더 잘 나옴 

정규화를 하게 되면 단위벡터가 되는데 단위벡터는 크기가 1인 것을 의미한다. 단위벡터는 크기가 1이되지만 방향은 그대로 가지고 있는 벡터이다. 즉 크기가 중요하지않고 방향만 필요하다면 단위벡터를 사용하는게 좋다. 



